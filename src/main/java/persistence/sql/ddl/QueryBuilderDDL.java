package persistence.sql.ddl;

import jakarta.persistence.Entity;
import jakarta.persistence.GenerationType;
import java.lang.reflect.Field;
import java.sql.JDBCType;
import java.util.StringJoiner;

public class QueryBuilderDDL<T> {
    private final Class<T> entityClass;

    public QueryBuilderDDL(Class<T> entityClass) {
        if (!entityClass.isAnnotationPresent(Entity.class)) {
            throw new IllegalArgumentException("해당 클래스는 엔티티 클래스가 아닙니다.");
        }

        this.entityClass = entityClass;
    }

    public String create() {
        return new StringBuilder("CREATE TABLE ")
                .append(entityClass.getSimpleName())
                .append(" (")
                .append(generateCreateFileds(entityClass.getDeclaredFields()))
                .append(")")
                .toString();
    }

    private String generateCreateFileds(Field[] fields) {
        StringJoiner filedDDL = new StringJoiner(", ");

        for (Field field : fields) {
            EntityColumn entityFiled = new EntityColumn(field);
            filedDDL.add(generateFiledCreate(entityFiled));
        }
        return filedDDL.toString();
    }

    private String generateFiledCreate(EntityColumn column) {
        return new StringBuilder(column.getName())
                .append(" ")
                .append(generateColumType(column.getJdbcType()))
                .append(generateConstraints(column.getOption()))
                .toString();
    }

    private String generateColumType(JDBCType jdbcType) {
        String typeName = jdbcType.getName();
        if (jdbcType.equals(JDBCType.VARCHAR)) {
            return typeName.toLowerCase() + "(255)";
        }
        return typeName.toLowerCase();
    }

    private String generateConstraints(EntityColumnOption option) {
        StringBuilder builder = new StringBuilder();
        if (!option.isNullable()) {
            builder.append(" not null");
        }
        if (option.hasGenerationType()) {
            builder.append(generateTypeDDL(option.getGenerationType()));
        }
        if (option.isPk()) {
            builder.append(" primary key");
        }
        return builder.toString();
    }

    private String generateTypeDDL(GenerationType generationType) {
        if (generationType == GenerationType.IDENTITY) {
            return " GENERATED BY DEFAULT AS IDENTITY";
        }
        return "";
    }

    public String drop() {
        return "DROP TABLE " + entityClass.getSimpleName();
    }
}
