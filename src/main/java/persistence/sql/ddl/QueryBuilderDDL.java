package persistence.sql.ddl;

import jakarta.persistence.Entity;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Table;
import java.lang.reflect.Field;
import java.sql.JDBCType;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class QueryBuilderDDL<T> {
    private final Class<T> entityClass;
    private static final String DEFAULT_CREATE_TABLE_FORMAT = "CREATE TABLE %s ";
    private static final String DEFAULT_CREATE_TABLE_COLUMNS_FORMAT = "(%s)";

    private static final String DEFAULT_CREATE_TABLE_PRIMARY_KEY_FORMAT = " primary key (%s)";

    private static final String DEFAULT_NOT_NULL_STRING = " not null";

    private static final String DEFAULT_GENERATED_IDENTITY  = " generated by default as identity";


    public QueryBuilderDDL(Class<T> entityClass) {
        if (!entityClass.isAnnotationPresent(Entity.class)) {
            throw new IllegalArgumentException("해당 클래스는 엔티티 클래스가 아닙니다.");
        }

        this.entityClass = entityClass;
    }

    public String create() {
        return new StringBuilder(DEFAULT_CREATE_TABLE_FORMAT.formatted(createTableName()))
                .append(DEFAULT_CREATE_TABLE_COLUMNS_FORMAT.formatted(
                        createFiledsQuery(entityClass.getDeclaredFields()
                )))
                .toString();
    }

    private String createTableName() {
        if (!entityClass.isAnnotationPresent(Table.class) || entityClass.getAnnotation(Table.class).name().isBlank()) {
            return entityClass.getSimpleName();
        }

        return entityClass.getAnnotation(Table.class).name();
    }

    private String createFiledsQuery(Field[] fields) {
        List<EntityColumn> columns = Arrays.stream(fields)
                .map(EntityColumn::new)
                .toList();

        return new StringBuilder(createColumnsQuery(columns))
                .append(createPrimaryKeyConstantsQuery(columns))
                .toString();
    }

    private String createColumnsQuery(List<EntityColumn> columns) {
        return columns
                .stream()
                .map(this::getEntityColumnString)
                .collect(Collectors.joining(", "));

    }

    private String createPrimaryKeyConstantsQuery(List<EntityColumn> columns) {
        return DEFAULT_CREATE_TABLE_PRIMARY_KEY_FORMAT.formatted(
            columns.stream()
                .filter(EntityColumn::isPk)
                .map(EntityColumn::getName)
                .collect(Collectors.joining(", ")
        ));
    }

    private String getEntityColumnString(EntityColumn column) {
        return new StringBuilder(column.getName())
                .append(" ")
                .append(createColumTypeQuery(column.getJdbcType()))
                .append(createConstraintsQuery(column.getOption()))
                .toString();
    }

    private String createColumTypeQuery(JDBCType jdbcType) {
        String typeName = jdbcType.getName();
        if (jdbcType.equals(JDBCType.VARCHAR)) {
            return typeName.toLowerCase() + "(255)";
        }
        return typeName.toLowerCase();
    }

    private String createConstraintsQuery(EntityColumnOption option) {
        StringBuilder builder = new StringBuilder();
        if (!option.isNullable()) {
            builder.append(DEFAULT_NOT_NULL_STRING);
        }
        if (option.hasGenerationType()) {
            builder.append(createGenerateTypeQuery(option.getGenerationType()));
        }
        return builder.toString();
    }

    private String createGenerateTypeQuery(GenerationType generationType) {
        if (generationType == GenerationType.IDENTITY) {
            return DEFAULT_GENERATED_IDENTITY;
        }
        return "";
    }

    public String drop() {
        return "DROP TABLE " + entityClass.getSimpleName();
    }
}
