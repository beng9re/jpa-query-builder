package persistence.sql.ddl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatExceptionOfType;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.exception.FiledEmptyException;
import persistence.fake.FakeDirect;
import persistence.testFixtures.Person;

class EntityColumnsTest {

    @Test
    @DisplayName("필드 없으면 예외가 발생한다.")
    void empty() {
        assertThatExceptionOfType(FiledEmptyException.class)
                .isThrownBy(() -> new EntityColumns(null));

    }

    @Test
    @DisplayName("필드에 의해 쿼리가 생성된다.")
    void createQuery() {
        //when
        EntityColumns entityColumns = new EntityColumns(Person.class.getDeclaredFields());

        //then
        assertThat(entityColumns.createColumnsQuery()).isEqualTo("id bigint generated by default as identity, "
                + "nick_name varchar(255), old integer, "
                + "email varchar(255) not null, "
                + "primary key (id)");
    }

    @Test
    @DisplayName("방언이 바뀌면 쿼리가 이에 맞게 변화 된다.")
    void createQueryWithDialect() {
        //when
        EntityColumns entityColumns = new EntityColumns(Person.class.getDeclaredFields(), new FakeDirect());

        //then
        assertThat(entityColumns.createColumnsQuery()).isEqualTo("id BIGINT GENERATED BY DEFAULT AS IDENTITY"
                + ", nick_name VARCHAR(255)"
                + ", old INTEGER, email VARCHAR(255) NOT NULL"
                + ", PRIMARY KEY (ID)");
    }


}
